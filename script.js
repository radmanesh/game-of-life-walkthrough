// Generated by Copilot

import { Grid } from './grid.js';
import { Renderer } from './renderer.js';
import { GAME_CONFIG as CONFIG } from './config.js';

/**
 * @class GameController
 * @description Main game controller coordinating grid and renderer
 */
class GameController {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.renderer = new Renderer(this.canvas);
        this.grid = null;
        this.lastUpdate = 0;

        this.#setupEventListeners();
        this.resize();
    }

    /**
     * @private
     * @description Setup event listeners for canvas interaction
     */
    #setupEventListeners() {
        window.addEventListener('resize', () => this.resize());
        this.canvas.addEventListener('click', (e) => this.handleClick(e));
    }

    /**
     * @description Resize canvas and grid
     */
    resize() {
        const width = window.innerWidth * 0.8;
        const height = window.innerHeight * 0.8;
        this.canvas.width = Math.floor(width / CONFIG.CELL_SIZE) * CONFIG.CELL_SIZE;
        this.canvas.height = Math.floor(height / CONFIG.CELL_SIZE) * CONFIG.CELL_SIZE;

        const rows = Math.floor(this.canvas.height / CONFIG.CELL_SIZE);
        const cols = Math.floor(this.canvas.width / CONFIG.CELL_SIZE);
        this.grid = this.grid || new Grid(rows, cols);
    }

    /**
     * @description Update game state
     */
    update() {
        if (!this.grid) return;
        this.grid = this.grid.getNextGeneration();
        this.renderer.render(this.grid);
    }

    /**
     * @param {MouseEvent} event
     */
    handleClick(event) {
        if (!this.grid) return;
        const rect = this.canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        const col = Math.floor(x / CONFIG.CELL_SIZE);
        const row = Math.floor(y / CONFIG.CELL_SIZE);
        this.grid.toggleCell(row, col);
        this.renderer.render(this.grid);
    }
}

const game = new GameController();
requestAnimationFrame(function animate(timestamp) {
    if (timestamp - game.lastUpdate >= CONFIG.UPDATE_INTERVAL) {
        game.update();
        game.lastUpdate = timestamp;
    }
    requestAnimationFrame(animate);
});
